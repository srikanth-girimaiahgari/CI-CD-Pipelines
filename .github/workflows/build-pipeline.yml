name: build-pipeline

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

env:
  repo: sr79979
  image_name1: youtube-clone
  image_name2: band-booking
  build_number: ${{github.run_number}}
  PROJECTS: "project-1 project-2"

jobs:
  
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set-output.outputs.changed_projects }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Detect Changes in Projects
        id: set-output
        run: |
          CHANGED_PROJECTS=""
          for project in $PROJECTS; do
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^$project/"; then
              CHANGED_PROJECTS+="$project "
            fi
          done

          echo "Changed Projects: $CHANGED_PROJECTS"
          echo "::set-output name=changed_projects::$CHANGED_PROJECTS"

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_projects != ''
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set-output.outputs.changed_projects }}
    steps:
    - uses: actions/checkout@v4
    - name: Build
      id: set-output
      run: |
        CHANGED_PROJECTS="${{ needs.detect-changes.outputs.changed_projects }}"
        echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_ENV
        for project in $CHANGED_PROJECTS; do
          echo "🔹 Processing $project"
          if [ "$project" == "project-2" ]; then
            echo "🔧 Running Maven Build for $project"
            cd $project
            mvn clean package
          fi
          cd $project
          echo "🐳 Building Docker Image for $project"
          docker build . --file Dockerfile --tag $project:${{env.build_number}}
          docker save $project:${{env.build_number}} -o $project.tar
        done
      - name: Upload Docker Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          $project.tar 
        
    - name: check files
      run: ls -lart project2/target
  
  scan:
    needs: docker-build
    runs-on: ubuntu-latest
    outputs:
      scan_results: ${{ steps.set-output.outputs.scan_results }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .  # Save in the current directory
      - name: Install Trivy Scanner
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.59.1/trivy_0.59.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.59.1_Linux-64bit.deb
      - name: Scan Docker Image for Vulnerabilities
        id :set-output
        run: |
          CHANGED_PROJECTS="${{ needs.docker-build.outputs.changed_projects }}"
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_ENV
          SCAN_RESULTS=""
          for project in $CHANGED_PROJECTS; do
            echo "🛡️ Scanning $project"
            trivy image --format table --input $project.tar --output scan_${project}.md || true
            echo "📌 Extracting Vulnerability Summary"
            grep -E 'Total:|HIGH:|CRITICAL:' scan_${project}.md > scan_summary_${project}.md || echo "No vulnerabilities found!" > scan_summary_${project}.md
            HIGH_COUNT=$(grep -oP 'HIGH:\s+\K\d+' scan_summary_${project}.md || echo "0")
            CRITICAL_COUNT=$(grep -oP 'CRITICAL:\s+\K\d+' scan_summary_${project}.md || echo "0")
            if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
              SCAN_RESULTS+="$project: ❌ High or Critical vulnerabilities found.\n"
              grep -E 'Total:|HIGH:|CRITICAL:' scan_${project}.md > scan_summary_${project}.md
            else
              SCAN_RESULTS+="$project: ✅ No high or critical vulnerabilities.\n"
            fi
          done
          echo -e "Scan Results:\n$SCAN_RESULTS"
          echo "::set-output name=scan_results::$SCAN_RESULTS"

      - name: Upload Scan Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: |
            scan_${project}.md
            scan_summary_${project}.md

  push:
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .  # Save in the current directory
      - name: Load Docker Image
        run: |
          docker load -i ${{env.image_name1}}.tar
          docker images
          podman load -i ${{env.image_name2}}.tar
          podman images
      - name: Login to Docker Hub
        run: |
          echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
          echo "${{secrets.DOCKERHUB_PASSWORD}}" | podman login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
      - name: Tag and Push Docker Image
        run: |
          CHANGED_PROJECTS="${{ needs.docker-build.outputs.changed_projects }}"
          for project in $CHANGED_PROJECTS; do
            if echo "${{ needs.scan-images.outputs.scan_results }}" | grep -q "$project: ❌"; then
              echo "⏩ Skipping push for $project due to vulnerabilities."
              continue
            fi
          docker tag ${{env.image_name1}}:${{env.build_number}} ${{env.repo}}/${{env.image_name1}}:${{env.build_number}}
          docker push ${{env.repo}}/${{env.image_name1}}:${{env.build_number}}
          podman tag localhost/${{env.image_name2}}:${{env.build_number}} ${{env.repo}}/${{env.image_name2}}:${{env.build_number}}
          podman push ${{env.repo}}/${{env.image_name2}}:${{env.build_number}}

      - name: Update README with Image Path & Scan Report
        run: |
         PROJECT1_IMAGE_PATH="${{env.repo}}/${{env.image_name2}}:${{env.build_number}}"
         PROJECT2_IMAGE_PATH="${{env.repo}}/${{env.image_name1}}:${{env.build_number}}"
         echo "![](https://img.shields.io/badge/Docker-Published-blue)" >> README.md
         echo -e "${{ needs.scan-images.outputs.scan_results }}" >> README.md
         echo "## Latest Docker Images" >> README.md
         echo "project1 Image:** \`PROJECT1_IMAGE_PATH\`" >> README.md
         echo "Project2 Image:** \`PROJECT2_IMAGE_PATH\`" >> README.md
         echo "## Vulnerability Scan Report" >> README.md
         cat scan_report.md >> README.md
         git config --global user.name "github-actions"
         git config --global user.email "github-actions@github.com"
         git add README.md
         git commit -m "Update README with Docker Image & Scan Report"
         git push
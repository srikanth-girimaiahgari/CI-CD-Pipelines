name: build-pipeline

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

env:
  repo: sr79979
  image_name1: youtube-clone
  image_name2: band-booking
  build_number: ${{github.run_number}}

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Maven Build
      run: |
        pwd
        ls -lart
        cd project2
        mvn --version
        mvn clean package
        ls -lart
        ls -lart target
        
    - name: check files
      run: ls -lart project2/target
      
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app.jar
        path: project2/target/music-band-booking-1.0.0.jar
        
  Docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: |
        cd project1
        docker build . --file Dockerfile --tag ${{env.image_name1}}:${{env.build_number}}
        docker images
        docker run -d --name ${{env.image_name1}} -p 3000:3000 ${{env.image_name1}}:${{env.build_number}}
        docker ps
        
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: app.jar
        path: project2/target  
        
    - name: Build the Podman image
      run: |
        cd project2
        ls -lart
        podman build . --file Dockerfile --tag ${{env.image_name2}}:${{env.build_number}}
        podman images
        podman run -d --name project2 -p 3100:8080 ${{env.image_name2}}:${{env.build_number}}
        podman ps
    - name: Save Docker Image as Artifact
      run: |
        docker save ${{env.image_name1}}:${{env.build_number}} -o ${{env.image_name1}}.tar
        podman save ${{env.image_name2}}:${{env.build_number}} -o ${{env.image_name2}}.tar
    - name: Upload Docker Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          ${{env.image_name1}}.tar 
          ${{env.image_name2}}.tar
  
  scan:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .  # Save in the current directory
      - name: Install Trivy Scanner
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.59.1/trivy_0.59.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.59.1_Linux-64bit.deb
      - name: Scan Docker Image for Vulnerabilities
        run: |
          trivy image  --severity HIGH,CRITICAL --input ${{env.image_name1}}.tar | tee scan_report.md
          trivy image  --severity HIGH,CRITICAL --input ${{env.image_name2}}.tar | tee scan_report.md

      - name: Upload Scan Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: scan_report.md

  push:
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .  # Save in the current directory
      - name: Load Docker Image
        run: |
          docker load -i ${{env.image_name1}}.tar
          docker images
          podman load -i ${{env.image_name2}}.tar
          podman images
      - name: Login to Docker Hub
        run: |
          echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
          echo "${{secrets.DOCKERHUB_PASSWORD}}" | podman login -u "${{secrets.DOCKERHUB_USERNAME}}" --password-stdin
      - name: Tag and Push Docker Image
        run: |
          docker tag ${{env.image_name1}}:${{env.build_number}} ${{env.repo}}/${{env.image_name1}}:${{env.build_number}}
          docker push ${{env.repo}}/${{env.image_name1}}:${{env.build_number}}
          podman tag localhost/${{env.image_name2}}:${{env.build_number}} ${{env.repo}}/${{env.image_name2}}:${{env.build_number}}
          podman push ${{env.repo}}/${{env.image_name2}}:${{env.build_number}}

      - name: Update README with Image Path & Scan Report
        run: |
         PROJECT1_IMAGE_PATH="${{env.repo}}/${{env.image_name2}}:${{env.build_number}}"
         PROJECT2_IMAGE_PATH="${{env.repo}}/${{env.image_name1}}:${{env.build_number}}"
         echo "![](https://img.shields.io/badge/Docker-Published-blue)" >> README.md
         echo "## Latest Docker Images" >> README.md
         echo "project1 Image:** \`PROJECT1_IMAGE_PATH\`" >> README.md
         echo "Project2 Image:** \`PROJECT2_IMAGE_PATH\`" >> README.md
         echo "## Vulnerability Scan Report" >> README.md
         cat scan_report.md >> README.md
         git config --global user.name "github-actions"
         git config --global user.email "github-actions@github.com"
         git add README.md
         git commit -m "Update README with Docker Image & Scan Report"
         git push
name: build-pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  repo: sr79979
  image_name1: youtube-clone
  image_name2: band-booking
  build_number: ${{ github.run_number }}
  PROJECTS: "project1 project2"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_projects: ${{ steps.set-changed-projects.outputs.changed_projects }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full history is available
      
      - name: Debug - Show Git Diff
        run: |
          echo "Checking changes between ${{ github.event.before }} and ${{ github.sha }}"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }}
      
      - name: Detect Changes in Projects
        id: set-changed-projects
        run: |
          CHANGED_PROJECTS=""
          for project in $PROJECTS; do
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "^$project/"; then
              CHANGED_PROJECTS+="$project "
            fi
          done
          echo "Changed Projects: $CHANGED_PROJECTS"
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_projects != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: |
          set -x
          CHANGED_PROJECTS="${{ needs.detect-changes.outputs.changed_projects }}"
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_ENV
          for project in $CHANGED_PROJECTS; do
            echo "🔹 Processing $project"
            if [ "$project" == "project-2" ]; then
              echo "🔧 Running Maven Build for $project"
              cd $project
              mvn clean package
            fi
            cd $project
            echo "🐳 Building Docker Image for $project"
            docker build . --file Dockerfile --tag $project:${{ env.build_number }}
            cd ..
            echo "Converting the image into Tar file"
            docker save $project:${{ env.build_number }} -o $project.tar
            ls -lart
          done
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: "*.tar"
      - name: Check files
        run: |
          ls -lart
          docker images

  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Install Trivy Scanner
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.59.1/trivy_0.59.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.59.1_Linux-64bit.deb
      - name: Scan Docker Image for Vulnerabilities
        id: scan-results
        run: |
          CHANGED_PROJECTS="${{ needs.build.outputs.changed_projects }}"
          echo "changed_projects=$CHANGED_PROJECTS" >> $GITHUB_ENV
          SCAN_RESULTS=""
          for project in $CHANGED_PROJECTS; do
            echo "🛡️ Scanning $project"
            trivy image --format table --input $project.tar --output scan_${project}.md || true
            grep -E 'Total:|HIGH:|CRITICAL:' scan_${project}.md > scan_summary_${project}.md || echo "No vulnerabilities found!" > scan_summary_${project}.md
            HIGH_COUNT=$(grep -oP 'HIGH:\s+\K\d+' scan_summary_${project}.md || echo "0")
            CRITICAL_COUNT=$(grep -oP 'CRITICAL:\s+\K\d+' scan_summary_${project}.md || echo "0")
            if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
              SCAN_RESULTS+="$project: ❌ High or Critical vulnerabilities found.\n"
            else
              SCAN_RESULTS+="$project: ✅ No high or critical vulnerabilities.\n"
            fi
          done
          echo "SCAN_RESULTS=$SCAN_RESULTS" >> $GITHUB_ENV
          echo "scan_results=$SCAN_RESULTS" >> $GITHUB_OUTPUT
      - name: Upload Scan Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan
          path: "scan_*.md"

  push:
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Load Docker Image
        run: |
          docker load -i ${{ env.image_name1 }}.tar
          docker images
          podman load -i ${{ env.image_name2 }}.tar
          podman images
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | podman login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Tag and Push Docker Image
        run: |
          CHANGED_PROJECTS="${{ needs.build.outputs.changed_projects }}"
          for project in $CHANGED_PROJECTS; do
            if echo "${{ needs.scan.outputs.scan_results }}" | grep -q "$project: ❌"; then
              echo "⏩ Skipping push for $project due to vulnerabilities."
              continue
            fi
            docker tag $project:${{ env.build_number }} ${{ env.repo }}/$project:${{ env.build_number }}
            docker push ${{ env.repo }}/$project:${{ env.build_number }}
      - name: Update README with Image Path & Scan Report
        run: |
          echo "## Latest Docker Images" > README.md
          echo "Project 1 Image: \`${{ env.repo }}/${{ env.image_name1 }}:${{ env.build_number }}\`" >> README.md
          echo "Project 2 Image: \`${{ env.repo }}/${{ env.image_name2 }}:${{ env.build_number }}\`" >> README.md
          echo "## Vulnerability Scan Report" >> README.md
          echo "${{ needs.scan.outputs.scan_results }}" >> README.md
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update README with Docker Image & Scan Report"
          git push
